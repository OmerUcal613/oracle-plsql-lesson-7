DROP TABLE employees;

CREATE TABLE employees (
    emp_id     NUMBER PRIMARY KEY,
    emp_name   VARCHAR2(100),
    salary     NUMBER(10, 2),
    department VARCHAR2(50)
);

INSERT INTO employees VALUES ( 1,
                               'Elvin Məmmədov',
                               1500,
                               'IT' );

INSERT INTO employees VALUES ( 2,
                               'Günay Əliyeva',
                               1800,
                               'HR' );

INSERT INTO employees VALUES ( 3,
                               'Kamran Hüseynov',
                               2000,
                               'Finance' );

INSERT INTO employees VALUES ( 4,
                               'Aytən Quliyeva',
                               2500,
                               'IT' );

INSERT INTO employees VALUES ( 5,
                               'Rasim Quliyev',
                               1700,
                               'HR' );

COMMIT;

set serveroutput on;

-- 1. SELECT İstifadəsi PL/SQL Blokunda
DECLARE
    v_name   employees.emp_name%TYPE;
    v_salary employees.salary%TYPE;
BEGIN
    SELECT
        emp_name,
        salary
    INTO
        v_name,
        v_salary
    FROM
        employees
    WHERE
        emp_id = 1;

    dbms_output.put_line('Adı: '
                         || v_name
                         || ', Maaşı: '
                         || v_salary);
END;
/

SELECT
    emp_name,
    salary
FROM
    employees
WHERE
    emp_id = 1;



-- 2. CURSOR İstifadəsi ilə Birdən Çox Sətirin Oxunması
DECLARE
    CURSOR emp_cursor IS
    SELECT
        emp_name,
        salary
    FROM
        employees
    WHERE
        department = 'IT';

    v_name   employees.emp_name%TYPE;
    v_salary employees.salary%TYPE;
BEGIN
    OPEN emp_cursor;
    LOOP
        FETCH emp_cursor INTO
            v_name,
            v_salary;
        EXIT WHEN emp_cursor%notfound;
        dbms_output.put_line('Adı: '
                             || v_name
                             || ', Maaşı: '
                             || v_salary);
    END LOOP;

    CLOSE emp_cursor;
END;
/



-- 3. FOR LOOP İlə Sadələşdirilmiş Kursor İstifadəsi
BEGIN
    FOR emp_rec IN (
        SELECT
            emp_name,
            salary
        FROM
            employees
        WHERE
            department = 'IT'
    ) LOOP
        dbms_output.put_line('Adı: '
                             || emp_rec.emp_name
                             || ', Maaşı: '
                             || emp_rec.salary);
    END LOOP;
END;
/

-- 4. BULK COLLECT ilə Effektiv Məlumat Oxumaq
DECLARE
    TYPE emp_table IS
        TABLE OF employees%rowtype;
    v_emp_list emp_table;
BEGIN
    SELECT
        *
    BULK COLLECT
    INTO v_emp_list
    FROM
        employees
    WHERE
        salary > 1500;

    FOR i IN v_emp_list.first..v_emp_list.last LOOP
        dbms_output.put_line('Adı: '
                             || v_emp_list(i).emp_name
                             || ', Maaşı: '
                             || v_emp_list(i).salary);
    END LOOP;

END;
/

SELECT
    *
FROM
    employees
WHERE
    salary > 1500;

DROP TABLE departments;

CREATE TABLE departments (
    dept_id   NUMBER PRIMARY KEY,
    dept_name VARCHAR2(100)
);

INSERT INTO departments VALUES ( 1,
                                 'IT' );

INSERT INTO departments VALUES ( 2,
                                 'HR' );

INSERT INTO departments VALUES ( 3,
                                 'Finance' );

COMMIT;

DROP TABLE employees;

CREATE TABLE employees (
    emp_id   NUMBER PRIMARY KEY,
    emp_name VARCHAR2(100),
    salary   NUMBER(10, 2),
    dept_id  NUMBER,
    CONSTRAINT emp_dept_fk FOREIGN KEY ( dept_id )
        REFERENCES departments ( dept_id )
);

INSERT INTO employees VALUES ( 101,
                               'Elvin Məmmədov',
                               2000,
                               1 );

INSERT INTO employees VALUES ( 102,
                               'Aytən Quliyeva',
                               2500,
                               1 );

INSERT INTO employees VALUES ( 103,
                               'Günay Əliyeva',
                               1800,
                               2 );

INSERT INTO employees VALUES ( 104,
                               'Rasim Quliyev',
                               1700,
                               2 );

INSERT INTO employees VALUES ( 105,
                               'Kamran Hüseynov',
                               2200,
                               3 );

COMMIT;

SELECT
    *
FROM
    departments;

SELECT
    *
FROM
    employees;


-- 5. SELECT ... INTO (Tək Məlumatın Seçilməsi)
DECLARE
    v_name      employees.emp_name%TYPE;
    v_salary    employees.salary%TYPE;
    v_dept_name departments.dept_name%TYPE;
BEGIN
    SELECT
        e.emp_name,
        e.salary,
        d.dept_name
    INTO
        v_name,
        v_salary,
        v_dept_name
    FROM
             employees e
        JOIN departments d ON e.dept_id = d.dept_id
    WHERE
        e.emp_id = 101;

    dbms_output.put_line('Adı: '
                         || v_name
                         || ', Maaşı: '
                         || v_salary
                         || ', Şöbə: '
                         || v_dept_name);

END;
/

SELECT
    e.emp_name,
    e.salary,
    d.dept_name
FROM
         employees e
    JOIN departments d ON e.dept_id = d.dept_id
WHERE
    e.emp_id = 101;



-- 6. CURSOR İlə Birdən Çox Sətirin Seçilməsi
DECLARE
    CURSOR emp_cursor IS
    SELECT
        emp_name,
        salary
    FROM
        employees
    WHERE
        dept_id = 1;

    v_name   employees.emp_name%TYPE;
    v_salary employees.salary%TYPE;
BEGIN
    OPEN emp_cursor;
    LOOP
        FETCH emp_cursor INTO
            v_name,
            v_salary;
        EXIT WHEN emp_cursor%notfound;
        dbms_output.put_line('Adı: '
                             || v_name
                             || ', Maaşı: '
                             || v_salary);
    END LOOP;

    CLOSE emp_cursor;
END;
/



-- 7. FOR LOOP İlə Kursor İstifadəsi
BEGIN
    FOR emp_rec IN (
        SELECT
            emp_name,
            salary
        FROM
            employees
        WHERE
            dept_id = 1
    ) LOOP
        dbms_output.put_line('Adı: '
                             || emp_rec.emp_name
                             || ', Maaşı: '
                             || emp_rec.salary);
    END LOOP;
END;
/



-- 8. BULK COLLECT İlə Məlumatın Massivə Yüklənməsi
DECLARE
    TYPE emp_table IS
        TABLE OF employees%rowtype;
    v_emp_list emp_table;
BEGIN
    SELECT
        *
    BULK COLLECT
    INTO v_emp_list
    FROM
        employees
    WHERE
        salary > 2000;

    FOR i IN v_emp_list.first..v_emp_list.last LOOP
        dbms_output.put_line('Adı: '
                             || v_emp_list(i).emp_name
                             || ', Maaşı: '
                             || v_emp_list(i).salary);
    END LOOP;

END;
/

SELECT
    *
FROM
    employees
WHERE
    salary > 2000;



-- 9. İşçi Sayının Seçilməsi(COUNT)
DECLARE
    v_count NUMBER;
BEGIN
    SELECT
        COUNT(*)
    INTO v_count
    FROM
        employees
    WHERE
        dept_id = 1;

    dbms_output.put_line('İT şöbəsində işləyənlərin sayı: ' || v_count);
END;
/

SELECT
    COUNT(*)
FROM
    employees
WHERE
    dept_id = 1;

SELECT
    *
FROM
    employees;

SELECT
    *
FROM
    departments;



-- 10. Ən Yüksək Maaşın Tapılması(MAX)
DECLARE
    v_max_salary NUMBER;
BEGIN
    SELECT
        MAX(salary)
    INTO v_max_salary
    FROM
        employees;

    dbms_output.put_line('Ən yüksək maaş: ' || v_max_salary);
END;
/

SELECT
    MAX(salary)
FROM
    employees;



-- 11. Orta Maaşın Seçilməsi(AVG)
DECLARE
    v_avg_salary NUMBER;
BEGIN
    SELECT
        AVG(salary)
    INTO v_avg_salary
    FROM
        employees;

    dbms_output.put_line('Orta maaş: ' || round(v_avg_salary, 2));
END;
/

SELECT
    AVG(salary)
FROM
    employees;



-- 12. Ən Aşağı Maaşın Tapılması(MIN)
DECLARE
    v_min_salary NUMBER;
BEGIN
    SELECT
        MIN(salary)
    INTO v_min_salary
    FROM
        employees;

    dbms_output.put_line('Ən aşağı maaş: ' || v_min_salary);
END;
/

SELECT
    MIN(salary)
FROM
    employees;



-- 13. EXCEPTION İlə Səhvləri Tutmaq
DECLARE
    v_name employees.emp_name%TYPE;
BEGIN
    BEGIN
        SELECT
            emp_name
        INTO v_name
        FROM
            employees
        WHERE
            emp_id = 999;

        dbms_output.put_line('İşçi tapıldı: ' || v_name);
    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('Belə bir işçi yoxdur.');
        WHEN too_many_rows THEN
            dbms_output.put_line('Sorğu çox nəticə qaytardı.');
    END;
END;
/

SELECT
    emp_name
FROM
    employees
WHERE
    emp_id = 999;



-- 14. EXCEPTION İlə Səhvləri Tutmaq
DECLARE
    v_name employees.emp_name%TYPE;
BEGIN
    BEGIN
        SELECT
            emp_name
        INTO v_name
        FROM
            employees
        WHERE
            emp_id < 104;

        dbms_output.put_line('İşçi tapıldı: ' || v_name);
    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('Belə bir işçi yoxdur.');
        WHEN too_many_rows THEN
            dbms_output.put_line('Sorğu çox nəticə qaytardı.');
    END;
END;
/

SELECT
    emp_name
FROM
    employees
WHERE
    emp_id < 104;

DROP TABLE projects;

CREATE TABLE projects (
    project_id   NUMBER PRIMARY KEY,
    project_name VARCHAR2(100),
    budget       NUMBER(10, 2)
);

INSERT INTO projects VALUES ( 1,
                              'ERP Sistemi',
                              50000 );

INSERT INTO projects VALUES ( 2,
                              'Mobil Tətbiq',
                              30000 );

INSERT INTO projects VALUES ( 3,
                              'Veb Portal',
                              20000 );

COMMIT;

DROP TABLE employees_projects;

CREATE TABLE employees_projects (
    emp_id     NUMBER,
    project_id NUMBER,
    role       VARCHAR2(50),
    CONSTRAINT emp_proj_fk1 FOREIGN KEY ( emp_id )
        REFERENCES employees ( emp_id ),
    CONSTRAINT emp_proj_fk2 FOREIGN KEY ( project_id )
        REFERENCES projects ( project_id )
);

INSERT INTO employees_projects VALUES ( 101,
                                        1,
                                        'Developer' );

INSERT INTO employees_projects VALUES ( 102,
                                        1,
                                        'Manager' );

INSERT INTO employees_projects VALUES ( 103,
                                        2,
                                        'Analyst' );

INSERT INTO employees_projects VALUES ( 104,
                                        3,
                                        'Designer' );

INSERT INTO employees_projects VALUES ( 105,
                                        2,
                                        'Developer' );

COMMIT;

SELECT
    *
FROM
    projects;

SELECT
    *
FROM
    employees_projects;



-- 15. İstifadəçinin Layihələrdəki Rolunun Tapılması(SELECT ... INTO)
DECLARE
    v_role employees_projects.role%TYPE;
BEGIN
    SELECT
        role
    INTO v_role
    FROM
        employees_projects
    WHERE
            emp_id = 101
        AND project_id = 1;

    dbms_output.put_line('İşçinin rolu: ' || v_role);
END;
/

SELECT
    role
FROM
    employees_projects
WHERE
        emp_id = 101
    AND project_id = 1;

SELECT
    *
FROM
    employees_projects;

SELECT
    *
FROM
    employees;

SELECT
    *
FROM
    projects;



-- 16. Bir İşçinin Hansı Layihələrdə Olduğunu Tapmaq(CURSOR)
DECLARE
    CURSOR emp_projects_cursor IS
    SELECT
        p.project_name,
        ep.role
    FROM
             employees_projects ep
        JOIN projects p ON ep.project_id = p.project_id
    WHERE
        ep.emp_id = 101;

    v_project_name projects.project_name%TYPE;
    v_role         employees_projects.role%TYPE;
BEGIN
    OPEN emp_projects_cursor;
    LOOP
        FETCH emp_projects_cursor INTO
            v_project_name,
            v_role;
        EXIT WHEN emp_projects_cursor%notfound;
        dbms_output.put_line('Layihə: '
                             || v_project_name
                             || ', Rol: '
                             || v_role);
    END LOOP;

    CLOSE emp_projects_cursor;
END;
/



-- 17. Bütün Layihələrə Gələn Ümumi Büdcəni Hesablamaq(SUM)
DECLARE
    v_total_budget NUMBER;
BEGIN
    SELECT
        SUM(budget)
    INTO v_total_budget
    FROM
        projects;

    dbms_output.put_line('Bütün layihələrə ayrılan ümumi büdcə: ' || v_total_budget);
END;
/

SELECT
    SUM(budget)
FROM
    projects;



-- 18. Ən Bahalı Layihənin Tapılması(MAX)
DECLARE
    v_max_budget   NUMBER;
    v_project_name projects.project_name%TYPE;
BEGIN
    SELECT
        project_name,
        budget
    INTO
        v_project_name,
        v_max_budget
    FROM
        projects
    WHERE
        budget = (
            SELECT
                MAX(budget)
            FROM
                projects
        );

    dbms_output.put_line('Ən bahalı layihə: '
                         || v_project_name
                         || ' ('
                         || v_max_budget
                         || ' AZN)');

END;
/

SELECT
    project_name,
    budget
FROM
    projects
WHERE
    budget = (
        SELECT
            MAX(budget)
        FROM
            projects
    );



-- 19. İşçiləri Rollarına Görə Qruplaşdırmaq(GROUP BY)
DECLARE
    CURSOR role_count_cursor IS
    SELECT
        role,
        COUNT(*) AS count
    FROM
        employees_projects
    GROUP BY
        role;

    v_role  employees_projects.role%TYPE;
    v_count NUMBER;
BEGIN
    OPEN role_count_cursor;
    LOOP
        FETCH role_count_cursor INTO
            v_role,
            v_count;
        EXIT WHEN role_count_cursor%notfound;
        dbms_output.put_line('Rol: '
                             || v_role
                             || ', Say: '
                             || v_count);
    END LOOP;

    CLOSE role_count_cursor;
END;
/



-- 20. BULK COLLECT ilə İstifadəçinin Layihələrini Yığmaq
DECLARE
    TYPE project_table IS
        TABLE OF projects.project_name%TYPE;
    v_project_list project_table;
BEGIN
    SELECT
        p.project_name
    BULK COLLECT
    INTO v_project_list
    FROM
             employees_projects ep
        JOIN projects p ON ep.project_id = p.project_id
    WHERE
        ep.emp_id = 101;

    FOR i IN v_project_list.first..v_project_list.last LOOP
        dbms_output.put_line('Layihə: ' || v_project_list(i));
    END LOOP;

END;
/

SELECT
    p.project_name
FROM
         employees_projects ep
    JOIN projects p ON ep.project_id = p.project_id
WHERE
    ep.emp_id = 101;



-- 21. Layihələrin Maaş Fondu Hesablanması(SUM)
DECLARE
    CURSOR project_salary_cursor IS
    SELECT
        p.project_name,
        SUM(e.salary) AS total_salary
    FROM
             employees e
        JOIN employees_projects ep ON e.emp_id = ep.emp_id
        JOIN projects           p ON ep.project_id = p.project_id
    GROUP BY
        p.project_name;

    v_project_name projects.project_name%TYPE;
    v_total_salary NUMBER;
BEGIN
    OPEN project_salary_cursor;
    LOOP
        FETCH project_salary_cursor INTO
            v_project_name,
            v_total_salary;
        EXIT WHEN project_salary_cursor%notfound;
        dbms_output.put_line('Layihə: '
                             || v_project_name
                             || ', Ümumi Maaş: '
                             || v_total_salary
                             || ' AZN');

    END LOOP;

    CLOSE project_salary_cursor;
END;
/

SELECT
    p.project_name,
    SUM(e.salary) AS total_salary
FROM
         employees e
    JOIN employees_projects ep ON e.emp_id = ep.emp_id
    JOIN projects           p ON ep.project_id = p.project_id
GROUP BY
    p.project_name;